{"version":3,"sources":["components/Loading.js","utils/utils.js","utils/RecordsAPI.js","components/Record.js","components/RecordPagination.js","components/RecordBody.js","components/RecordForm.js","components/AmountBox.js","components/DailyAmount.js","components/RecordApp.js","serviceWorker.js","index.js"],"names":["Loading","props","react_default","a","createElement","className","concat","color","role","formattedTime","timestamp","date","Date","year","getFullYear","month","getMonth","day","getDate","parse","trim","api","process","REACT_APP_RECORDS_API_URL","Record","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","dateInput","React","createRef","titleInput","amountInput","state","edit","setState","event","preventDefault","updatedRecord","current","value","title","amount","Number","parseInt","id","record","body","axios","put","res","handleEditRecord","data","console","log","_context","t0","delete","handleDeleteRecord","_context2","onClick","handleToggle","bind","handleDelete","type","defaultValue","ref","handleEdit","recordForm","recordRow","Component","RecordPagination","currentPage","target","innerText","handleJumpPage","next","totalPages","prev","pagesNum","pages","i","push","key","jump","getPages","moveBackward","moveForward","RecordBody","recordsToDisplay","Math","ceil","records","length","slice","newPage","_this2","displayedRecords","getDisplayedRecords","error","message","isLoaded","map","Record_Record","RecordPagination_RecordPagination","getTotalPages","jumpPage","components_Loading","RecordForm","name","defineProperty","post","handleNewRecord","onSubmit","handleSubmit","onChange","handleChange","placeholder","disabled","valid","AmountBox","text","DailyAmoount","toConsumableArray","Set","amounts","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","err","return","getDailyAmounts","dates","uniqueDates","RecordApp","get","newRecord","preRecord","recordIndex","indexOf","updatedRecords","index","objectSpread","deletedRecord","newRecords","filter","item","reduce","curr","getCredits","getDebits","getBalance","RecordForm_RecordForm","addRecord","DailyAmount_DailyAmoount","RecordBody_RecordBody","updateRecord","deleteRecord","Boolean","window","location","hostname","match","ReactDOM","render","RecordApp_RecordApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0d0bd41.chunk.js","sourcesContent":["import React from 'react'\n\nconst Loading = (props) => {\n  return (\n    <div className={`spinner-border text-${props.color}`} role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  )\n}\n\nexport default Loading\n","export const formattedTime = timestamp => {\n  // timestamp 时间戳数字形式\n  const date = new Date(timestamp*1000)\n  const year = date.getFullYear()\n  const month = date.getMonth() + 1\n  const day = date.getDate()\n  return `${year}-${month}-${day}`\n}\n\nexport const timestamp = date => Date.parse(date.trim()) / 1000\n","import axios from 'axios'\n\n// api 存放在 .env.development.local 文件中, 每一行为一个变量, 开头均为 REACT_APP_, process.env 读取环境变量\nconst api = process.env.REACT_APP_RECORDS_API_URL || 'https://5d2d9b4343c343001498d272.mockapi.io/api/v1/records'\n\nexport const getAll = () => axios.get(`${api}/api/v1/records`)\n\nexport const create = body => axios.post(`${api}/api/v1/records`, body)\n\nexport const update = (id, body) => axios.put(`${api}/api/v1/records/${id}`, body)\n\nexport const remove = id => axios.delete(`${api}/api/v1/records/${id}`)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { formattedTime, timestamp } from '../utils/utils'\nimport * as RecordsAPI from '../utils/RecordsAPI'\n\nexport default class Record extends Component {\n  constructor(props) {\n    super(props)\n    // 创建 ref\n    this.dateInput = React.createRef()\n    this.titleInput = React.createRef()\n    this.amountInput = React.createRef()\n    this.state = {\n      edit: false\n    }\n  }\n\n  handleToggle() {\n    this.setState({\n      edit: !this.state.edit\n    })\n  }\n\n  async handleEdit(event) {\n    event.preventDefault()\n    const updatedRecord = {\n      // 发送要保证是原始数据, 因此拿到表单数据以后还需要处理\n      date: timestamp(this.dateInput.current.value),\n      title: this.titleInput.current.value,\n      amount: Number.parseInt(this.amountInput.current.value)\n    }\n\n    try {\n      const res = await RecordsAPI.update(this.props.record.id, updatedRecord)\n      // 需要将 form 自己隐藏, 也就是需要改变 edit state\n      this.setState({\n        edit: false,\n      })\n      // 更新数据, 需在 records 这个数组中找到 record(也就是服务器返回的 res.data) 的位置, 然后替换掉\n      // 也需要返回之前的 record, 即为 props 传进来的 record, 是只读属性, 因此没有修改\n      this.props.handleEditRecord(this.props.record, res.data)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  async handleDelete() {\n    try {\n      await RecordsAPI.remove(this.props.record.id)\n      // 注意这里返回的是 this.props.record, 而不是服务器返回的数据, 要保证数据一样\n      this.props.handleDeleteRecord(this.props.record)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  recordRow() {\n    // 不可编辑情况下的样式\n    return (\n      <tr>\n        <td>{formattedTime(this.props.record.date)}</td>\n        <td>{this.props.record.title}</td>\n        <td>${this.props.record.amount}</td>\n        <td>\n          <button className=\"btn btn-info mr-1\" onClick={this.handleToggle.bind(this)}>\n            Edit\n          </button>\n          <button className=\"btn btn-danger mr-1\" onClick={this.handleDelete.bind(this)}>\n            Delete\n          </button>\n        </td>\n      </tr>\n    )\n  }\n\n  recordForm() {\n    // 可编辑情况下的样式\n    return (\n      <tr>\n        <td>\n          {/* 直接使用非受控组件, 因此是 defaultValue, 同时需要创建 ref 来获取 input 的值 */}\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            defaultValue={formattedTime(this.props.record.date)}\n            ref={this.dateInput}\n          />\n        </td>\n        <td>\n          <input \n            type=\"text\" \n            className=\"form-control\" \n            defaultValue={this.props.record.title} \n            ref={this.titleInput} \n          />\n        </td>\n        <td>\n          <input \n            type=\"text\" \n            className=\"form-control\" \n            defaultValue={this.props.record.amount} \n            ref={this.amountInput} \n          />\n        </td>\n        <td>\n          <button className=\"btn btn-info mr-1\" onClick={this.handleEdit.bind(this)}>\n            Update\n          </button>\n          <button className=\"btn btn-danger mr-1\" onClick={this.handleToggle.bind(this)}>\n            Cancel\n          </button>\n        </td>\n      </tr>\n    )\n  }\n\n  render() {\n    if (this.state.edit) {\n      return this.recordForm()\n    } else {\n      return this.recordRow()\n    }\n  }\n}\n\n\n// 类型检查\nRecord.propTypes = {\n  handleEditRecord: PropTypes.func,\n  handleDeleteRecord: PropTypes.func,\n  record: PropTypes.shape({\n    id: PropTypes.string,\n    date: PropTypes.number,\n    title: PropTypes.string,\n    amount: PropTypes.number  \n  })\n}\n","import React, { Component } from 'react'\nimport '../styles/RecordPagination.css'\n\nexport default class RecordPagination extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentPage: this.props.currentPage\n    }\n  }\n\n  jump(event) {\n    // 根据用户点击的, 设置当前页数, 同时更新父组件\n    this.setState({\n      currentPage: parseInt(event.target.innerText)\n    })\n    this.props.handleJumpPage(parseInt(event.target.innerText), 10)\n  }\n\n  moveForward(event) {\n    // 如果不是最后一页, +1, 否则始终维持 currentPage 为最后一页, 即 totalPage\n    let next\n    if (this.state.currentPage + 1 < this.props.totalPages) {\n      next = this.state.currentPage + 1\n    } else {\n      next = this.props.totalPages\n    }\n    this.setState({\n      currentPage: next\n    })\n    this.props.handleJumpPage(next, 10)\n  }\n\n  moveBackward(event) {\n    let prev\n    if (this.state.currentPage > 1) {\n      prev = this.state.currentPage - 1\n    } else {\n      prev = 1\n    }\n    this.setState({\n      currentPage: prev\n    })\n    this.props.handleJumpPage(prev, 10)\n\n  }\n\n  getPages(pagesNum) {\n    const pages = []\n    for (let i = 0; i < pagesNum; i++) {\n      pages.push(\n        <li \n          className={`page-item ${(i+1 === this.state.currentPage) ? 'active' : ''}`}\n          key={i}\n          onClick={this.jump.bind(this)}\n        >\n          <span className=\"page-link\">\n            {i+1}\n          </span>\n        </li>\n      )\n    }\n    return pages\n  }\n\n  render() {\n    // 一共的页数\n    const pages = this.getPages(this.props.totalPages)\n\n    return (\n      <nav>\n        <ul className=\"pagination justify-content-center\">\n          <li className={`page-item ${this.state.currentPage === 1 ? 'disabled' : ''}`}>\n            <span \n              className=\"page-link\" \n              onClick={this.moveBackward.bind(this)}              \n            >\n              Previous\n            </span>\n          </li>\n          {pages}\n          <li className={`page-item ${this.state.currentPage === this.props.totalPages ? 'disabled' : ''}`}>\n            <span \n              className=\"page-link\"\n              onClick={this.moveForward.bind(this)}  \n            >\n              Next\n            </span>\n          </li>\n        </ul>\n      </nav>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Loading from './Loading'\nimport Record from './Record'\nimport RecordPagination from './RecordPagination'\n\nexport default class RecordBody extends Component {\n  constructor(props) {\n    super(props)\n    this.recordsToDisplay = 3\n    this.state = {\n      // 当前的 pagination 的页面\n      currentPage: 1,\n    }\n  }\n\n  getTotalPages() {\n    return Math.ceil(this.props.records.length / this.recordsToDisplay)\n  }\n\n  getDisplayedRecords() {\n    return this.props.records.slice(\n      this.recordsToDisplay * this.state.currentPage - this.recordsToDisplay,\n      this.recordsToDisplay * this.state.currentPage\n    )\n  }\n\n  jumpPage(newPage) {\n    this.setState({\n      currentPage: newPage,\n    })\n  }\n\n  render() {\n    const displayedRecords = this.getDisplayedRecords()\n    if (this.props.error) {\n      return <div>Error: {this.props.error.message}</div>\n    } else if (!this.props.isLoaded) {\n      return (\n        <div>\n          <Loading color=\"primary\" />\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <table className=\"table table-bordered\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Title</th>\n                <th>Amount</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {displayedRecords.map(record => (\n                <Record\n                  key={record.id}\n                  record={record}\n                  // 多级组件之间的传递, 直接将父组件的 props 原封不动传递给子组件, 但是注意, 要在父组件上绑定 this 保证可以触发事件\n                  handleEditRecord={this.props.handleEditRecord}\n                  handleDeleteRecord={this.props.handleDeleteRecord}\n                />\n              ))}\n            </tbody>\n          </table>\n          <RecordPagination \n            totalPages={this.getTotalPages()}\n            currentPage={this.state.currentPage}\n            handleJumpPage={this.jumpPage.bind(this)}\n          />\n        </div>\n      )\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport * as RecordsAPI from '../utils/RecordsAPI'\nimport { timestamp } from '../utils/utils'\n\nexport default class RecordForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      date: '',\n      title: '',\n      amount: ''\n    }\n  }\n\n  handleChange(event) {\n    const name = event.target.name\n    const value = event.target.value\n    // 使用 es6 的计算属性设置状态\n    // 当有多个 input 框需要控制状态的时候, 使用该方法, 其中 [name] 里面的 name 是之前的变量\n    this.setState({\n      [name]: value\n    })\n  }\n\n  valid() {\n    return this.state.date && this.state.title && this.state.amount\n  }\n\n  async handleSubmit(event) {\n    // 默认表单提交使用 get 方法发送数据, 使用 preventDefault 可以阻止\n    event.preventDefault()\n    // 这里很神奇, 不用去获得表单里面用户输入的数据, 这是由于 onChange 方法受控组件之间在表单 value 和 state 之间做了双向绑定\n    // 表单里面用户输入的数据就是 state 的值\n    const data = {\n      ...this.state,\n      date: timestamp(this.state.date),\n      amount: Number.parseInt(this.state.amount, 10)\n    }\n    \n    try {\n      const res = await RecordsAPI.create(data)\n      // 发送了数据以后返回的数据传递给父组件, 这里的 handleNewRecord 就是父组件传递给子组件的方法\n      this.props.handleNewRecord(res.data)\n      // 同时将数据表单里面的数据清空, 也就是将 state 清空\n      this.setState({\n        date: '',\n        title: '',\n        amount: ''\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  render() {\n    return (\n      <form className=\"mb-3\" onSubmit={this.handleSubmit.bind(this)}>\n        <div className=\"form-row align-items-center\">\n          <div className=\"col\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              onChange={this.handleChange.bind(this)}\n              placeholder=\"Date\"\n              name=\"date\"\n              value={this.state.date}\n            />\n          </div>\n          <div className=\"col\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              onChange={this.handleChange.bind(this)}\n              placeholder=\"Title\"\n              name=\"title\"\n              value={this.state.title}\n            />\n          </div>\n          <div className=\"col\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              onChange={this.handleChange.bind(this)}\n              placeholder=\"Amount\"\n              name=\"amount\"\n              value={this.state.amount}\n            />\n          </div>\n          <div className=\"col\">\n            <button type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>\n              Create Record\n            </button>\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\n\n// 类型检查\nRecordForm.propTypes = {\n  handleNewRecord: PropTypes.func\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function AmountBox(props) {\n  return (\n    <div className=\"col\">\n      <div className=\"card\">\n        <div className={`card-header bg-${props.type} text-white`}>\n          {props.text}\n        </div>\n        <div className=\"card-body\">\n          ${props.amount}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n// props 类型检查\nAmountBox.propTypes = {\n  type: PropTypes.string,\n  text: PropTypes.string,\n  amount: PropTypes.number,\n}\n","import React, { Component } from 'react'\nimport { formattedTime } from \"../utils/utils\"\n\nexport default class DailyAmoount extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n    }\n  }\n\n  uniqueDates(records) {\n    if (records.length === 0) {\n      return []\n    }\n    // 根据 records 返回所有的不重复的日期\n    return [...new Set(records.map(record => formattedTime(record.date)))]\n  }\n\n  getDailyAmounts(date, records) {\n    let amounts = 0\n    for (const record of records) {\n      if (formattedTime(record.date) === date) {\n        amounts += record.amount\n      }\n    }\n    return amounts\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value,\n      amounts: this.getDailyAmounts(event.target.value, this.props.records)\n    })\n  }\n\n  render() {\n    // 每次根据返回的父组件的更新的数据流重新生成一些数据\n    let dates = this.uniqueDates(this.props.records)\n    let amounts = this.getDailyAmounts(this.state.value, this.props.records)\n\n    if (this.props.records.length === 0) {\n      return <div></div>\n    }\n    return (\n      <div className=\"input-group mb-3\">\n        <div className=\"input-group-prepend\">\n          <span className=\"input-group-text bg-info text-white\" >Daily Expenses</span>\n        </div>\n        <select value={this.state.value} onChange={this.handleChange.bind(this)} className=\"custom-select\">\n          <option>choose a date...</option>\n          {dates.map(date => (\n            <option\n              value={date}\n              key={date}\n            >\n              {date}\n            </option>\n          ))}\n        </select>\n        <div className=\"input-group-append\">\n          <span className=\"input-group-text bg-warning text-dark\">$</span>\n          <span \n            className={`input-group-text bg-${amounts >= 0 ? 'success' : 'danger'} text-white`}\n          >\n            {amounts}\n          </span>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport RecordBody from './RecordBody'\nimport RecordForm from './RecordForm'\nimport * as RecordsAPI from '../utils/RecordsAPI'\nimport AmountBox from './AmountBox'\nimport DailyAmount from './DailyAmount'\n\nexport default class RecordApp extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      error: null,\n      // 数据是否被加载, 不管是否发生错误\n      isLoaded: false,\n      records: []\n    }\n  }\n\n  async componentDidMount() {\n    // 生命周期, 当组件挂载以后可以初始化数据\n    try {\n      const res = await RecordsAPI.getAll()\n      this.setState({\n        records: res.data,\n        isLoaded: true\n      })  \n    } catch (error) {\n      this.setState({\n        isLoaded: true,\n        error: error\n      })\n    }\n  }\n\n  addRecord(newRecord) {\n    this.setState({\n      error: null,\n      isLoaded: true,\n      // 使用扩展运算符拷贝前面的所有对象, 然后加入之前的新的对象\n      records: [...this.state.records, newRecord]\n    })\n  }\n\n  updateRecord(preRecord, updatedRecord) {\n    // 传过来的是之前的 record 和更新以后的 record  需要用更新的 record 覆盖掉之前的 record\n    const recordIndex = this.state.records.indexOf(preRecord)\n    const updatedRecords = this.state.records.map((record, index) => {\n      if (index !== recordIndex) {\n        // 如果找不到, 那么就返回保持不变\n        return record\n      }\n      // 否则更新, 使用扩展运算符更新, 表示将原始 records 里面的那条 record 用最新的 record 更新掉\n      return {\n        ...record,\n        ...updatedRecord\n      }\n    })\n    this.setState({\n      records: updatedRecords,\n    })\n  }\n\n  deleteRecord(deletedRecord) {\n    const recordIndex = this.state.records.indexOf(deletedRecord)\n    const newRecords = this.state.records.filter((item, index) => index !== recordIndex)\n    this.setState({\n      records: newRecords\n    })\n  }\n\n  getCredits() {\n    let credits = this.state.records.filter(record => {\n      return record.amount >= 0\n    })\n\n    return credits.reduce((prev, curr) => {\n      return prev + Number.parseInt(curr.amount, 10)\n    }, 0)\n  }\n\n  getDebits() {\n    let credits = this.state.records.filter(record => {\n      return record.amount < 0\n    })\n\n    return credits.reduce((prev, curr) => {\n      return prev + Number.parseInt(curr.amount, 10)\n    }, 0)\n  }\n\n  getBalance() {\n    return this.getCredits() + this.getDebits()\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Records</h2>\n        <div className=\"row mb-3\">\n          {/* 子组件传递数据更新父组件的 state 之后, 会触发父组件的 render() 方法的重新调用, 因此直接在这里传递 props 实时更新 */}\n          <AmountBox text=\"Credit\" type=\"success\" amount={this.getCredits()} />\n          <AmountBox text=\"Debit\" type=\"danger\" amount={this.getDebits()} />\n          <AmountBox text=\"Balance\" type=\"info\" amount={this.getBalance()} />\n        </div>\n        <RecordForm handleNewRecord={this.addRecord.bind(this)} />\n        <DailyAmount records={this.state.records} />\n        <RecordBody \n          error={this.state.error}\n          isLoaded={this.state.isLoaded}\n          records={this.state.records}\n          handleEditRecord={this.updateRecord.bind(this)} \n          handleDeleteRecord={this.deleteRecord.bind(this)}\n        />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RecordApp from './components/RecordApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RecordApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}